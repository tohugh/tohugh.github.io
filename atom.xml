<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[hugh's blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-01-27T08:42:50.963Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[hugh]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[我的博客搭建好了！]]></title>
    <link href="http://yoursite.com/2016/01/27/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%A5%BD%E4%BA%86/"/>
    <id>http://yoursite.com/2016/01/27/我的博客搭建好了/</id>
    <published>2016-01-27T08:42:50.963Z</published>
    <updated>2016-01-27T08:42:50.963Z</updated>
    <content type="html"><![CDATA[<p>摘要：Hexo搭建Blog的过程<br><a id="more"></a></p>
<h2 id="u642D_u5EFA_u8FC7_u7A0B"><a href="#u642D_u5EFA_u8FC7_u7A0B" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="u5DE5_u5177_uFF1A"><a href="#u5DE5_u5177_uFF1A" class="headerlink" title="工具："></a>工具：</h3><ul>
<li><a href="https://desktop.github.com/" target="_blank" rel="external">Github For Windows</a></li>
<li><a href="https://git-scm.com/" target="_blank" rel="external">Git</a></li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></li>
<li>Hexo （安装好上述软件之后）<ul>
<li>打开Github下面的GitShell，输入下面的命令行：<ul>
<li><code>npm install hexo-cli -g</code></li>
<li><code>npm install hexo --save</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="u521D_u59CB_u5316_u914D_u7F6E"><a href="#u521D_u59CB_u5316_u914D_u7F6E" class="headerlink" title="初始化配置"></a>初始化配置</h3><ol>
<li>创建目录如：<code>E:\myblog\hexo</code></li>
<li>GitShell中定位到该目录输入下面的命令行，folder 即<strong>tohugh.github.io</strong><ol>
<li><code>hexo init &lt;folder&gt;</code></li>
<li><code>cd &lt;folder&gt;</code></li>
<li><code>npm install</code></li>
</ol>
</li>
<li><p>安装hexo插件</p>
<p> <img src="http://7xpu2r.com1.z0.glb.clouddn.com/%E6%8F%92%E4%BB%B6%E5%91%BD%E4%BB%A4%E8%A1%8C.jpg" alt=""></p>
</li>
<li><p>查看效果：输入命令行<code>hexo server</code>，浏览器地址栏输入<code>localhost:4000</code></p>
</li>
</ol>
<h3 id="u540C_u6B65_u5230Github"><a href="#u540C_u6B65_u5230Github" class="headerlink" title="同步到Github"></a>同步到Github</h3><ul>
<li><p>配置deployment</p>
<pre><code>- git config --global user.name &quot;yourname&quot;
- git config --global user.email &quot;youremail&quot;
</code></pre></li>
<li><p>在_config.yml文件中，找到Deployment，然后按照如下修改：<br>  <img src="http://7xpu2r.com1.z0.glb.clouddn.com/deploy%E5%91%BD%E4%BB%A4%E8%A1%8C.jpg" alt=""></p>
</li>
<li><code>hexo g</code> 生成静态网页</li>
<li><code>hexo d</code> 开始部署</li>
</ul>
<h3 id="u5199_u65B0_u7684_u535A_u5BA2"><a href="#u5199_u65B0_u7684_u535A_u5BA2" class="headerlink" title="写新的博客"></a>写新的博客</h3><ul>
<li>在<code>source\_posts</code>目录下新建<code>.md</code> 文件，在<code>xx.github.io</code>目录下<code>git bash here</code>，然后就…..可以了!</li>
</ul>
<h2 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://wsgzao.github.io/post/hexo-guide/#" target="_blank" rel="external">使用GitHub和Hexo搭建免费静态Blog</a></li>
<li><a href="http://blog.shijinrong.cn/2016/01/03/2016-01-03-how-to-build-blog/" target="_blank" rel="external">如何使用10个小时搭建出个人域名而又Geek的独立博客？</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>摘要：Hexo搭建Blog的过程<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android,获取图片和视频的缩略图]]></title>
    <link href="http://yoursite.com/2016/01/27/Android%E7%94%9F%E6%88%90%E7%BC%A9%E7%95%A5%E5%9B%BE/"/>
    <id>http://yoursite.com/2016/01/27/Android生成缩略图/</id>
    <published>2016-01-27T08:34:16.502Z</published>
    <updated>2016-01-27T08:34:16.502Z</updated>
    <content type="html"><![CDATA[<p>摘要：Android,获取图片和视频的缩略图的代码及注释<br><a id="more"></a></p>
<pre><code> /**
 * @param uri：图片保存路径
 * @param width: 缩略图的宽
 * @param height：缩略图的高
 * @return bitmap:缩略图
 * 获取缩略图
 */
public Bitmap getImageThumbnail(String uri,int width,int height){
    //创建bitmap对象
    Bitmap bitmap = null;
    BitmapFactory.Options options = new BitmapFactory.Options();
    /*
    *如果设置为true的话不会返回一个真正的bitmap，仅仅会取回宽高，这样就不会占用太多内存导致频繁的oom
     */
    options.inJustDecodeBounds = true;
    bitmap = BitmapFactory.decodeFile(uri,options);
    /*
    * options.outWidth:图片原始宽
    * options.outHeight:图片原始高
    * */
    int beWidth = options.outWidth / width;//缩略图的宽
    int beHeight = options.outHeight / height;//缩略图的高
    int be = 1;
    /*
    *计算缩放比
     */
    if(beWidth&lt;beHeight){
        be = beWidth;
    }else{
        be = beHeight;
    }if (be &lt;= 0){
        be = 1;
    }
    options.inSampleSize = be;
    /*
    * 这次要把inJustDecodeBounds设置为false是因为返回的是真正的bitmap
    * */
    options.inJustDecodeBounds = false;
    bitmap = BitmapFactory.decodeFile(uri, options);//根据比例压缩过的图像
    /*使用ThumbnailUtils生成的图像不会被拉伸*/
    bitmap = ThumbnailUtils.extractThumbnail(bitmap, width, height, ThumbnailUtils.OPTIONS_RECYCLE_INPUT);
    return bitmap;
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>摘要：Android,获取图片和视频的缩略图的代码及注释<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
</feed>
